package com.xiaoqiang.scala.basic.function

/*
 * scala中的函数基本用法演示
 */
object FunctionBasic {

    def main(args: Array[String]): Unit = {
        // 如果函数没有参数列表，那么函数调用时可以省略后面的(), 如果不想执行函数，可以使用_占位符
        val v1 = f1 _
        // 调用v1
        v1()
        val v2 = f2 _ //由于f2的返回值是一个函数，那么想要调用时就需要加(), 而v2现在也是一个函数，调用时也要加()
        // 调用v2
        v2()()
        println("=" * 10)
        // 调用有默认参数值得函数
        f3()
        f3(10)
        println("=" * 10)
        // 当参数中有多个默认值时，按照从左到右的顺序给函数赋值, 也可以按照名称传值
        println(f4())
        println(f4(20))
        println(f4(y = 40))
        println("=" * 10)
        // 变长参数调用
        println(f5(1, 2, 3))
        println(f5())
        println("=" * 10)
        // 递归函数
        println(f8(4))
        println("=" * 10)
        // 省略等号，没有返回值类型的函数叫做过程
        println(f9(""))
    }

    def f1() = println("function")

    /*
     * 在scala中，对函数的调用有省略()的特性，所以当调用函数时可以不写()，这样的话要是我们只是想返回一个函数，
     * 而不是返回函数调用的结果的时候就有麻烦，因此scala中提供了一个占位符_，当我们赋值或者返回值只想返回函数
     * 而不是函数的调用结果的时候，就可以使用该占位符：f1 _
     */
    def f2() = f1 _

    /*
     * 如果函数声明的同时进行了初始化操作，那么在调用时可以不传参数, 但是需要注意的是，参数列表里面初始化时不能给_
     */
    def f3(i: Int = 0): Unit = println(i)

    /*
     * 当声明方法时，如果有多个参数有默认值，那么传递参数时，采用从左到右的顺序给参数赋值
     */
    def f4(x: Int = 10, y: Int = 20): Int = x + y

    /*
     * 变长参数：类似于Java中的...
     */
    def f5(x: Int*): Int = x.sum

    /*
     * 递归函数不能省略返回值，函数没有执行完成之前没办法推断返回值得类型
     */
    def f8(x: Int): Int = if (x <=0) 1 else x * f8(x - 1)

    /*
     * 过程：没有返回值得函数，叫做过程，当函数没有返回值时，=可以省略, 但是当=省略之后，{}不能省略
     * 如果函数没有返回值，并且省略了等号之后，函数不会推断最后一行代码的类型，即代码返回Unit
     */
    def f9(content: String) { "zhangsan" }
}
